#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 Normal; 
in vec2 oTexture;

uniform sampler2D texture1;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 camPos;

void main()
{
    

    // BASIC LIGHT ------------------------------------------------------------
    
    
    vec3 temp_lightpos = vec3(0, 1, 0);
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(vec3(temp_lightpos - FragPos));
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // SPECULAR ---------------------------------------------------------------

    float specularStrength = 0.5;
    
    vec3 viewDir = normalize(camPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);

    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;  


    FragColor = texture(texture1, oTexture) * vec4(lightColor * (ambient + diffuse + specular), 1.0);



}